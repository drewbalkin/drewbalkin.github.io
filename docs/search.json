[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "My name is Robert Balkin, and I have a deep interest in all-things finance. This includes both theoretical as well as practical scenarios where I enjoy to mix the tools and techniques of quantitative finance with the traditional viewpoints of finance on fundamental valuation. Although this is how I think about and approach markets, not all of this will be covered in this blog. This blog is a catch all for the things I have been thinking about with regard to finance that would be appropriate to showcase for all online participants, especially those with a mathematical / quantitative finance background."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "kellyoptimalPEtiming.html",
    "href": "kellyoptimalPEtiming.html",
    "title": "Kelly Optimal In Earnings Driven Financial Market",
    "section": "",
    "text": "Abstract\nWe consider a Kelly Optimal portfolio allocation depending on PE ratio of an underlying stock index. We assume that the earnings of the index as well as the market multiple are exogenous variables described by SDEs. The earnings of the index are driven by a Geometric Brownian Motion, while the market multiple’s inverse, the earnings yield, is driven by an Ornstein-Uhlenbeck process with parameters determined from historical data. We construct the Kelly optimal portfolio through neural networks as well as analytically. The results are back-tested on CAPE and PE ratio data.\nThe purpose is not to showcase or recommend a strategy that is necessarily good or bad. The purpose is to highlight how neural networks can be used to successfully solve portfolio optimization problems. One could imagine a much more complicated (and more realistic) model for which one could find an optimal portfolio strategy via this approach.\n\n\nIntroduction\nWe can think of our ownership of a stock at time \\(t\\) as a claim on the future dividends \\((D_s)_{s \\geq t}\\), where the amount \\(D_s ds\\) per share is paid to the stockholder’s over time \\([s,s+ds]\\). This gives a (naive) valuation formula\n\\[S_t = \\int_t^{\\infty}  \\mathbb{E}^Q [ e^{-r(s-t)} D_s ds ],\\] where \\(Q\\) is the risk-neutral measure. The problem is that 1. We don’t know the risk neutral-measure. It would have to be calibrated from market prices. 2. Market preferences for risk vary with time meaning that \\(Q\\) itself varies with time.\nHowever, we can take this pricing formula as motivation. There are 3 factors that are going to impact the stock return at time \\(t\\):\n\nThe dividend return\nThe change in dividends (i.e. recession / growth). More generally, the probability distribution of future dividends changes as new information is introduced.\nThe market value for future dividends (change in multiple). More generally, the change in \\(Q\\) over time as investors change their risk preferences.\n\nSo one component of the return (and the stochastic nature of the stock return) is from directly receiving the random stochastic payments given by the process \\((D_t)\\).\nThe second component of return is that this probabilistic future stream of dividends changes over time. That is the outlook changes so the probability distribution of these dividends change as well. This causes a price change as the market reacts to how the dividend changes throughout time.\nHowever, there is a third component to return. Even if the probability distribution of future dividends were not to change over a time interval \\([t,t+dt]\\), it is still possible that the market is willing to change its mind and pay a different price for this exact same stream of future dividends.\nIn our model, we will model the first component through the actual payment of dividends, the second component by modelling the dividend process, and the third component by a market multiple process. This corresponds to the three components of total stock return: dividends, dividend growth, and market multiple changes.\nNote that a company or stock index may not pay all excess profits or earnings, as dividends. Other options are buybacks, acquisitions, or reinvestment. As for buybacks, we can treat this exactly the same as a reinvested dividend so we can pretend that buybacks are simply a part of the dividend distribution. The other two are not and would affect the dividend growth rate. However, if we assume that acquisitions / reinvestment is done at a similar rate of return as compared to owning the security, we can just assume earnings are just glorified dividends with respect to our model.\nFrom now on, we will treat dividends as earnings. We assume that earnings as a whole are paid out to the investor as if it were a dividend. Afterall the profit at time \\(t\\) is distributed to shareholders one way or another whether it is dividends, buybacks, aquisitions, or reinvestment. It is dangerous to include all of these as “dividend” payments, however it will be critical to the model.\nIn this model, we will have a stock index whose profits (or dividends by our assumption) at time \\(t\\) is given by the process \\(D_t\\) where \\(D_tdt\\) represents the total dividend payment in \\([t,t+dt]\\) for owning \\(1\\) unit of stock. This dividend process will be given by a GBM with mean \\(\\mu\\) and volatility \\(\\sigma_D\\). Seperately, there is a market multiple process \\(M_t\\) which represents the amount the market is willing to pay for the stock given its current dividend. Simply, if \\(S_t\\) is stock price at time \\(t\\), then \\(D_t M_t = S_t\\). To model the market multiple process, we model its inverse, the dividend yield process \\(y_t = \\frac{1}{M_t} = \\frac{D_t}{S_t}\\) with an OU model, which is common for interest rates. This gives the model\n\\[\\begin{align}\ndD_t = \\mu D_t dt + \\sigma_D D_t dW^1_t \\\\\ndy_t = -\\theta(y_t-y_{eq})dt + \\sigma_y dW^2_t\n\\end{align}\\]\nWe assume for now that the Brownian motions \\(W^1,W^2\\) are independent although this is not entirely representative of reality. The model parameters \\(\\mu,\\sigma_D,\\theta,y_{eq},\\sigma_y\\) will eventually be calibrated to Shiller’s data for SP500 earnings.\nFrom our exogenous dividend and dividend yield processes, we have an endogenous stock price process as \\(S_t = \\frac{D_t}{y_t}\\). Now we can model our full problem. Let \\(X_t\\) be the investor’s wealth at time and \\(\\pi_t\\) be the fraction of wealth in which the investor invests in the stock index.\nOver time \\([t,t+dt]\\) the investor will receive dividends equal to the amount of \\(\\pi_t X_t y_t dt\\) as they have \\(\\pi_t X_t\\) invested in the stock which has a dividend yield of \\(y_t\\). What is meant by dividend yield here is the instantaneous dividend yield. If \\(t\\) is measured in years where \\(t=1\\) for instance is 1 year, then the annualized dividend yield. The second aspect of P&L over \\([t,t+dt]\\) is given by the change in stock price– the price return. The price return consists of price change due to dividend change (i.e. dividend growth) and also market multiple changes. Simply however, we can calculate it as follows. The stock price return is \\(\\frac{dS_t}{S_t}\\) and \\(\\pi_t X_t\\) is invested in the stock so the P&L from stock price change is given by \\(\\pi_t X_t \\frac{dS_t}{S_t}\\). Adding these two components of P&L together we get that \\(dX_t = \\pi_t X_t y_t dt + \\pi_t X_t \\frac{dS_t}{S_t}\\).\nWriting this in terms of our exogenous variables \\(D_t\\) and \\(y_t\\), we get that the dynamics for the wealth process \\(X_t\\) are given by:\n\\[dX_t = \\pi_t X_t y_t dt + \\pi_t X_t \\frac{d(D_t/y_t)}{D_t/y_t}\\]\nApplying Ito’s lemma, we get that\n\\[dX_t = \\pi_t X_t y_t dt + \\pi_t X_t \\frac{dD_t}{D_t} + \\pi_t X_t \\frac{d(1/y_t)}{1/y_t} + \\pi_t X_t \\frac{dD_t d(1/y_t)}{D_t/y_t} \\]\nThe last term is \\(0\\) as we assume \\(dW^1_t dW^2_t = 0\\). Thus we get\n\\[dX_t = \\pi_t X_t y_t dt + \\pi_t X_t\\frac{dD_t}{D_t} + \\pi_t X_t \\frac{d(1/y_t)}{1/y_t}  \\]\nFactoring out the total stock allocation \\(\\pi_t X_t\\), we see that this is saying that the return of investing in a stock is given by \\[ y_t dt +  \\frac{dD_t}{D_t} + \\frac{d(1/y_t)}{1/y_t}\\] which is the dividend yield percent + percent dividend growth rate + percent change in multiple.\nAnyway we are concerned with the following problem:\n\\[\\begin{align}\ndD_t & = \\mu D_t dt + \\sigma_D D_t dW^1_t \\\\\ndy_t & = -\\theta(y_t-y_{eq})dt + \\sigma_y dW^2_t\\\\\ndX_t & = \\pi_t X_t y_t dt + \\pi_t X_t \\frac{dD_t}{D_t} + \\pi_t X_t \\frac{d(1/y_t)}{1/y_t}\\\\\n\\end{align}\\]\n\\[\\max_{\\pi} E[U(X_T)]\\]\nfor some utility function \\(U\\). We will consider the Kelly optimal portfolio allocation given by taking \\(U\\) to be \\(\\log(\\cdot)\\). This will give the growth optimal portfolio.\n\n\nNumerical Solution\nWe wish to numerically approach the stochastic optimal control problem:\n\\[\\begin{align}\ndD_t & = \\mu D_t dt + \\sigma_D D_t dW^1_t \\\\\ndy_t & = -\\theta(y_t-y_{eq})dt + \\sigma_y dW^2_t\\\\\ndX_t & = \\pi_t X_t y_t dt + \\pi_t X_t \\frac{dD_t}{D_t} + \\pi_t X_t \\frac{d(1/y_t)}{1/y_t}\\\\\n\\end{align}\\]\n\\[\\max_{\\pi} E[U(X_T)].\\]\nThis can be done using neural networks as follows.\nFirst we assume that we are looking for closed loop feedback form controls that is \\(\\pi_t = \\pi(D_t,y_t,X_t,t)\\). In other words, we decide our portfolio allocation based on the current state of our wealth, the dividend, and dividend yield, and the current time. Logically, we should expect to see that in reality \\(\\pi_t = \\pi(t,y_t)\\). That is the only relevant information to decide the portfolio allocation should be the current time \\(t\\) (because the model ends at time \\(T\\)) and the current dividend yield \\(y_t\\) as we decide whether we think stocks are expensive or not, as well as how important that is to the portfolio allocation. Since we are calculating the expected value of the \\(\\log(\\cdot)\\), a myopic utility function, it will turn out the true optimal portfolio does not depend on time \\(t\\), but only dividend yield \\(y_t\\). However, for our numerical approach, this is not necessary and we can pretend we did not know any better.\nAssuming that these are the only factors that matter, let us look for the optimal control \\(\\pi_t = \\pi(t,y_t)\\). We approximate the optimal control by looking for the optimal control in a class of neural networks.\nThus we are solving the following problem. Let \\(\\pi_{NN}(t,y_t;\\theta)\\) be a neural network with parameters \\(\\theta\\) that inputs \\((t,y_t)\\) and maps it to the fraction portfolio allocation to stocks. Then for this \\(\\pi_{NN}(\\cdot,\\cdot;\\theta)\\) we will get a corresponding distribution of final wealth states \\(X_T\\) for this choice of control. We can then calculate the reward function \\(E[log(X_T)]\\) for this choice of control and then optimize the control by performing gradient ascent on the reward function.\nWe will be doing this optimization in PyTorch. First let us create a neural network architecture that takes two inputs \\(t\\) and \\(y\\) and has a single real valued output.\n\nimport torch\nfrom torch import nn\n\nclass Model(nn.Module):\n    #Standard NN\n    def __init__(self):\n        super().__init__()\n        self.net = nn.Sequential( \n            nn.Linear(2,64), \n            nn.Sigmoid(), \n            nn.Linear(64, 64), \n            nn.Sigmoid(),\n            nn.Linear(64, 1), \n            nn.Sigmoid() #bounds alloc between 0% and 300% (see final output) as to not short or get too leveraged. This makes simulations / training run smoothly.           \n            )\n    def forward(self,z):\n        return 3*self.net(z)\n    \npi_NN = Model()\n\nWith our neural network portfolio control \\(\\pi_{NN}(t,y_t;\\theta)\\) defined, let us simulate the dynamics of the wealth process under this choice of portfolio allocation. We will numerically simulate:\n\\[\\begin{align}\ndD_t & = \\mu D_t dt + \\sigma_D D_t dW^1_t \\\\\ndy_t & = -\\theta(y_t-y_{eq})dt + \\sigma_y dW^2_t\\\\\ndX_t & = \\pi_{NN}(t,y_t) X_t \\bigg(y_t dt +  \\frac{dD_t}{D_t} + \\frac{d(1/y_t)}{1/y_t}\\bigg)\\\\\n\\end{align}\\]\n\\[\\max_{\\pi} E[\\log(X_T)].\\]\nHere, the maximum is with respect to the neural networks in our hypothesis class. That is we are finding the neural network parameters \\(\\theta\\) corresponding to a strategy that is close to Kelly optimal (subject to our conditions). We will optimize \\(\\theta\\) by usual gradient descent based training. In our case, we will use the Adam optimization.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nT = 20 #Choice of final time for ODE.\nN_steps = 100 #Number of time discretizations of ODE.\nN_sim = 2**10 #number of simulations to do in calculating expected log wealth.\nN_epochs = 5000\ndt = T/N_steps #size of dt for euler scheme\n\n#parameters\n#Recallebrate y_eq etc because I dont think it was taken from cont compounded yields\n#mu = .01053 #calibrated from real earnings data\nmu = .01\nsigma_D = .1295 #calibrated from real earnings data\ntheta = .126 #calibrated from 1/PE 1860-1990\nsigma_y = .01288 #calibrated from 1/PE 1860-1990\n#y_eq = 0.0783 #calibrated from 1/PE 1860-1990\ny_eq = 0.075\nopt = torch.optim.Adam(pi_NN.parameters(), lr=.001)\n\n\nLosses = []\n\nfor n in range(N_epochs):\n    dW1 = torch.randn(N_sim,N_steps)*np.sqrt(dt)\n    dW2 = torch.randn(N_sim,N_steps)*np.sqrt(dt)\n\n\n    X = np.empty(N_steps+1,'O') #preallocating X. 'O' is so that it stores objects. It will be a numpy array of torch tensors\n    y = np.empty(N_steps+1,'O')\n    D = np.empty(N_steps+1,'O')\n    t = np.empty(N_steps+1,'O')\n    pi_val = np.empty(N_steps,'O')\n\n    X[0] = 1*torch.ones(N_sim).unsqueeze(1) #initial condition represents X(0) = 1. Let's just start with $1\n    y[0] = (.025*torch.randn(N_sim)+.07).unsqueeze(1).clamp_min(0.005)\n    D[0] = torch.ones(N_sim).unsqueeze(1)\n\n    for i in range(0,N_steps):\n        t[i] = i*dt*torch.ones(N_sim).unsqueeze(1) #Now, t[i] is the usual time given i steps but stored as a tensor. t is a numpy array of these 1d tensors.\n\n        ty = torch.cat((t[i],y[i]),1) #this is (t,y) but as a torch tesnor. We concatenated to tensors into a new one.\n        #ty = torch.cat((t[i],y[i],D[i],X[i]),1)\n        \n        pi_val[i] = pi_NN(ty) #we get our current portfolio alloc given this y\n\n        #Now we do an ODE step\n        D[i+1]  = D[i] + mu*D[i]*dt + sigma_D*D[i]*dW1[:,i].unsqueeze(1)\n        y[i+1]  = y[i] -theta*(y[i]-y_eq)*dt + sigma_y*dW2[:,i].unsqueeze(1)\n        y[i+1] = y[i+1].clamp_min(0.005) #make 200 multiple as high as we go.... 0.5% div yield.\n        X[i+1]  = X[i] + pi_val[i]*X[i]*(y[i]*dt + (D[i+1]  - D[i])/D[i] + (1/y[i+1]  - 1/y[i])*y[i])\n        X[i+1] = X[i+1].clamp_min(0) #ReLU so that if X is negative it gets replaced by 0\n        \n    Loss = - sum(torch.log(X[-1]+2**(-52)))/N_sim \n    Loss.backward()\n    opt.step()\n    opt.zero_grad()\n    \n    Losses.append(Loss.item())\n    \n\n\nfig, ax = plt.subplots()\nax.plot(Losses, label='Training Loss')\nax.set_title('Training Loss Over Time')\nax.set_xlabel('Epoch')\nax.set_ylabel('Loss')\nax.legend()\nplt.show()\n\n\n\n\nWe note that simulating portfolios has one problem. Although we have defined our portfolio to be one of finite leverage as our neural network output is not allowed to employ over \\(300\\%\\) alloaction to the risky asset, it is still possible that a blow up occurs. To combat this, we employ 1. an adjustment to the earnings yield process that makes it impossible for the stock market to trade above 200x earnings (this will be incorporated in optimal portfolio strategies) 2. an adjustment to wealth such that if the wealth were to go negative, it will remain at \\(0\\) for all time. This will make the log undefined so we have to add a very small amount \\(2^{-52}\\) to the loss function so that the log-wealth is always defined even for the trainings which cause wealth to go to \\(0\\).\nWith our trained network, we can now see what the Kelly optimal allocation behaves on some generated data. Keep in mind our adjustments to the dynamics mean that this will not exactly be Kelly for our first proposed model, but a slightly altered model.\n\n\nCode\nimport matplotlib.ticker as mtick\n\nwith torch.no_grad():\n    # Set the number of seeds to plot\n    num_seeds = 3\n\n    # Set the color map to use for the lines\n    colormap = plt.cm.viridis\n            \n    fig, ax = plt.subplots(2, 2, figsize=(9.5, 5.5))\n\n    # Loop over the seeds\n    for seed in range(num_seeds):\n        # Generate a color for the current seed\n        color = colormap(seed / num_seeds)\n        t = np.linspace(0, T, N_steps+1)\n\n        x_tens = torch.Tensor(N_steps, N_sim)\n        torch.stack(list(X), out=x_tens)\n        x_plt = x_tens.numpy()\n        ax[1, 0].plot(t, x_plt[:, seed] / x_plt[0, seed], label='Scenario {}'.format(seed+1))\n        ax[1, 0].set_title(\"Wealth under Kelly allocation rule\")\n        ax[1, 0].set_ylabel(\"Wealth (Multiple of Initial)\")\n        ax[1, 0].set_yscale(\"log\") \n\n        D_tens = torch.Tensor(N_steps, N_sim)\n        torch.stack(list(D), out=D_tens)\n        D_plt = D_tens.numpy()\n        ax[0, 0].plot(t, D_plt[:, seed], label='Scenario {}'.format(seed+1))\n        ax[0, 0].set_title(\"Index Earnings\")\n        ax[0, 0].set_ylabel(\"Earnings\")\n\n        y_tens = torch.Tensor(N_steps, N_sim)\n        torch.stack(list(y), out=y_tens)\n        y_plt = y_tens.numpy()\n        ax[0, 1].plot(t, 1/y_plt[:, seed], label='Scenario {}'.format(seed+1))\n        ax[0, 1].set_title(\"Index PE Ratio\")\n        ax[0, 1].set_ylabel(\"PE Ratio\")\n\n        pi_tens = torch.Tensor(N_steps, N_sim)\n        torch.stack(list(pi_val), out=pi_tens)\n        pi_plt = pi_tens.numpy()\n        ax[1, 1].plot(t[0:-1], pi_plt[:, seed], label='Scenario {}'.format(seed+1))\n        ax[1, 1].set_title(\"Kelly Optimal Allocation to Index\")\n        ax[1, 1].set_ylabel(\"Allocation (%)\")\n        ax[1, 1].yaxis.set_major_formatter(mtick.PercentFormatter(1.0))\n    \n    for a in ax.flat:\n        a.set_xlabel(\"Time (years)\")  # Set x-label to 'Time' for all subplots\n    \n    plt.subplots_adjust(hspace=.5)\n    plt.legend([])  # Remove the legend\n    plt.show()\n\n\n\n\n\nWe see that at higher PE ratios, the Kelly optimal strategy decides to allocate less to the index, while at high PE ratios, the Kelly optimal strategy has a leveraged allocation to the index which is inutitive especially given the model dynamics which models in mean reversion of PE ratios.\nLet’s see what the neural network optimal control decides to allocate to equities for a given market multiple. We run this experiment in 3 stages of time. At year 0, at year 5, at year 10.\n\n\nCode\nimport matplotlib.ticker as mtick\nwith torch.no_grad():\n    pi = []\n    N_points = 100\n    for seed in [0,5,10]:\n        t = (seed)*torch.ones(N_points).unsqueeze(1)\n        y = torch.linspace(.02,.2,N_points).unsqueeze(1)\n        ty = torch.cat((t,y),1)\n        pi.append(pi_NN(ty))\n\n    # Set the number of seeds to plot\n    num_seeds = 5\n\n    # Set the color map to use for the lines\n    colormap = plt.cm.viridis\n\n    plt.figure(1)\n\n    # Loop over the seeds\n    for seed in [0,5,10]:\n        # Generate a color for the current seed\n        color = colormap(seed / 10)\n        plt.plot(1/y,pi[int(seed/5)],color=color, label='Year {}'.format(seed))\n\n    plt.title('Stock index allocation for given valuation')\n    plt.xlabel('PE ratio')\n    plt.ylabel('Allocation')\n    plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1.0))\n    plt.legend()\n\n\n\n\n\nInterestingly, we see that the allocation to equities does not depend on time, only PE, as all the curves overlap. Of course we see some differences in the curves, but this because we are approximating the true Kelly optimal with neural networks! Actually, it turns out we can derive the analytical solution for Kelly Optimal in this case.\n\n\nAnalytical Solution\nWe now present the analytical solution to compare with our trained neural network.\nWe must solve:\n\\[\\begin{align}\ndD_t & = \\mu D_t dt + \\sigma_D D_t dW^1_t \\\\\ndy_t & = -\\theta(y_t-y_{eq})dt + \\sigma_y dW^2_t\\\\\ndX_t & = \\pi_t X_t\\bigg(y_t dt + \\frac{dD_t}{D_t} + \\frac{d(1/y_t)}{1/y_t} \\bigg)\\\\\n\\end{align}\\]\n\\[\\arg \\max_{\\pi} E[\\log(X_T)].\\]\nWe are looking for a Markovian control \\(\\pi_t = \\pi(t,D_t,y_t,X_t)\\), but we expect the solution to only depend on \\(y_t\\) for reasons addressed earlier.\nWe proceed by considering \\(\\log(X_t)\\). With Ito’s lemma we have that \\(d \\log(X_t) = \\frac{dX_t}{X_t} - \\frac{1}{2}\\Big( \\frac{dX_t}{X_t} \\Big)^2\\), which gives:\n\\[d \\log(X_t) = \\pi_t \\bigg(y_tdt + \\frac{dD_t}{D_t} + \\frac{d(1/y_t)}{1/y_t} \\bigg) - \\frac{1}{2} \\pi_t^2 \\bigg( \\Big(\\frac{dD_t}{D_t} \\Big)^2 + \\Big(  \\frac{d(1/y_t)}{1/y_t} \\Big)^2 \\bigg)\\] where we have simplified according to \\(dW^1dW^2 = 0\\).\nComputing some of these terms:\n\\[\\frac{d(1/y_t)}{1/y_t} = \\Big( \\frac{1}{y_t}\\theta(y_t-y_{eq}) + \\frac{\\sigma_y^2}{y_t^2} \\Big)dt - \\frac{\\sigma_y}{y_t}dW^2_t\\]\nThis gives us:\n\\[d \\log(X_t) = \\pi_t \\bigg(y_t + \\mu + \\frac{1}{y_t}\\theta(y_t-y_{eq}) + \\frac{\\sigma_y^2}{y_t^2} \\bigg)dt - \\frac{1}{2} \\pi_t^2 \\bigg( \\sigma_D^2 +   \\frac{\\sigma_y^2}{y_t^2} \\bigg)dt + \\ \"noise \\ terms\".\\]\nTaking integral and then expectation (the integral against noise has expectation 0), we get:\n\\[\\mathbb{E}[\\log(X_t)] =  \\log(X_0) + \\mathbb{E} \\bigg[   \\int_0^T \\bigg( \\pi_t \\Big(y_t + \\mu + \\frac{1}{y_t}\\theta(y_t-y_{eq}) + \\frac{\\sigma_y^2}{y_t^2} \\Big) - \\frac{1}{2} \\pi_t^2 \\Big( \\sigma_D^2 +   \\frac{\\sigma_y^2}{y_t^2} \\Big) \\bigg) dt \\bigg].\\]\nThis can be maximized by maximizing the integral pointwise for each \\(t\\) (it is a concave down parabola in terms of \\(\\pi\\)). Taking the derivative with repsect to \\(\\pi\\) and setting \\(=0\\), we get\n\\[\\pi^*_t = \\frac{y_t + \\mu + \\frac{1}{y_t}\\theta(y_t-y_{eq}) + \\frac{\\sigma_y^2}{y_t^2}}{\\sigma_D^2 +   \\frac{\\sigma_y^2}{y_t^2} }.\\]\nThis can be simplified. However, in this form, we see that the top represents the components of return (return due to yield + dividend growth + mean reversion), while the denominator represents the components of variance (dividend variance + market multiple variance).\nAs expected, we see that \\(\\pi^*_t = \\pi^* (y_t)\\). That is the optimal portolio allocation is decided purely based on the current earnings yield.\nKeep in mind the yield here \\(y_t\\) is a continuously compounded yield. So saying \\(y_t = 0.1\\) for instance actually corresponds to the annualized rate \\(e^{y_t} - 1 = 0.105\\)\n\n\nCode\n#Plotting:\n\ndef pi_true(M):\n    y = 1/M\n    top = y + mu + M*theta*(y-y_eq) + M**2*sigma_y**2\n    bottom = sigma_D**2 + M**2*sigma_y**2\n    return top/bottom\n\ndef pi_true_adjusted(M):\n    return np.minimum(pi_true(M),3.0*np.ones(len(M)))\n\n# Set the number of seeds to plot\nnum_seeds = 5\n\n# Set the color map to use for the lines\ncolormap = plt.cm.viridis\n\n\n# Loop over the seeds\n\nt0 = torch.zeros(21).unsqueeze(1) #Choose model for year 0. We showed it didn't matter what year.\ny = torch.linspace(.02,.2,21).unsqueeze(1)\nty = torch.cat((t0,y),1)\ny_NN = pi_NN(ty)\ny_NN = y_NN.detach()\nplt.figure(2)\ny = np.linspace(.02,.2,21)\nplt.plot(1/y,pi_true_adjusted(1/y),'b')\nplt.plot(1/y,y_NN,'g')\nplt.yticks([0, .5, 1, 1.5, 2,2.5,3], ['0%', '50%', '100%', '150%', '200%', '250%','300%'])\nplt.title('Stock index allocation for given valuation')\nplt.xlabel('PE ratio')\nplt.ylabel('Allocation')\n\n\nText(0, 0.5, 'Allocation')\n\n\n\n\n\nThe cause for differences: in our model, we did not allow the PE ratio to go above 200. We also naturually capped the leverage of the NN based control to be \\(300\\%\\) whereas here we are rounding the true Kelly control to be maxed at \\(300\\%\\) for comparison purposes.\nAlso we see the bizarre relation where the true Kelly control will start going up at a large enough PE! This is due to a modelling error where we take \\(y\\) to be given by an OU. The problem is that under the OU model, if we isolate the “change in multiple” component to stock price return, \\(\\frac{d(1/y_t)}{1/y_t}\\), we see that there are problems when \\(y_t\\) is near \\(0\\). When \\(y_t\\) is near \\(0\\), the change in multiple’s contribution to portfolio return is to have an infinite mean return and infinite variance. This is not true in reality.\n\\[\\frac{d(1/y_t)}{1/y_t} = \\Big( \\frac{1}{y_t}\\theta(y_t-y_{eq}) + \\frac{\\sigma_y^2}{y_t^2} \\Big)dt - \\frac{\\sigma_y}{y_t}dW^2_t\\]\nHere we see the mean return and volatility of multiple compression / expansion go to infinity as \\(y_t\\) goes to \\(0\\). This causes a model issue that we believe wouldn’t exist in reality. In our model, we actually make PEs max out at 200, which makes the NN allocation control seem more believable (because it was trained on perhaps a slightly more believable model) than the true Kelly.\n\n\nBacktests\nWe now perform a backtest of the model.\n\n\nCode\nimport pandas as pd\nwith torch.no_grad():\n    df = pd.read_excel('PEdata.xlsx',sheet_name='Sheet1',header=None)\n    PEdata = df[4][5:1805]\n    TotalReturndata = df[5][5:1805]\n    IndexRealE = df[6][5:1805]\n    PE10data = df[8][5:1805]\n\n    PE = np.array(PEdata) #now PE contains the trailing 12 month PE for every month at a time from 1860s on\n    PE = PE.astype(np.float32)\n    PE = torch.tensor(PE)\n\n    PE10 = np.array(PE10data) \n    PE10 = PE10.astype(np.float32)\n    PE10 = torch.tensor(PE10)\n\n    TR = np.array(TotalReturndata)\n    TR = TR.astype(np.float32)\n    TR = torch.tensor(TR)\n    TR2 = 0*TR\n\n    IndexRealE = np.array(IndexRealE)\n    IndexRealE = IndexRealE.astype(np.float32)\n    IndexRealE = torch.tensor(IndexRealE)\n\n    N_steps = len(TR)\n\n\n    dt = 1/12\n    T = dt*len(TR)\n\n\n    X = np.empty(N_steps,'O')\n    X_PE10 = np.empty(N_steps,'O')\n    t = np.empty(N_steps-1,'O')\n    pi_val = np.empty(N_steps,'O')\n    pi_valPE10 = np.empty(N_steps,'O')\n\n    X[0] = torch.tensor([1.]).unsqueeze(1) #initial condition represents X(0) = 10. Let's just start with $10\n    TR2[0] = 1\n    X_PE10[0] = torch.tensor([1.]).unsqueeze(1) #initial condition represents X(0) = 10. Let's just start with $10\n    y = (1/PE).unsqueeze(1)\n    yPE10 = (1/PE10).unsqueeze(1)\n\n    for i in range(0,N_steps-1):\n        t[i] = torch.tensor([10.0]).unsqueeze(1) #always puts it in year 10 since doesn't know how to handle past year 20 \n        \n        ty = torch.cat((t[i],y[i].unsqueeze(1)),1) #always puts it in year 5 since doesn't know how to handle past year 20\n        tyPE10 = torch.cat((t[i],yPE10[i].unsqueeze(1)),1)\n        pi_val[i] = pi_NN(ty) #we get our current portfolio alloc given this y\n        pi_valPE10[i] = pi_NN(tyPE10) #we get our current portfolio alloc given this y\n\n        #Now we do an ODE step\n        r = TR[i+1]/TR[i]-1\n        X[i+1] = X[i] + r*pi_val[i]*X[i]\n        X_PE10[i+1] = X_PE10[i] + r*pi_valPE10[i]*X_PE10[i] \n        TR2[i+1] = TR2[i] + 2*r*TR2[i]\n\n\n\n\nCode\nwith torch.no_grad():\n    fig, ax = plt.subplots(2, 2, figsize=(9.5, 5.5))\n\n    t = np.linspace(2021-T,2021,N_steps)\n    \n    x_tens = torch.Tensor(N_steps)\n    torch.stack(list(X),out=x_tens)\n    x_plt = x_tens.numpy()\n    x_plt = x_plt[:,0,0]\n    \n    pi_tens = torch.Tensor(N_steps-1)\n    torch.stack(list(pi_val[0:-1]),out=pi_tens)\n    pi_plt = pi_tens.numpy()\n    pi_plt = pi_plt[:,0,0]\n\n    TR = np.array(TR)\n    TR = TR/TR[0]\n    \n    startyear = 1871\n    index_start = int((startyear-1871)/dt)\n    \n    \n    ax[0,0].set_title('Backtest of optimal portfolio')\n    ax[0,0].plot(t[index_start:],x_plt[index_start:]/x_plt[index_start],'y',\n                 t[index_start:],TR[index_start:]/TR[index_start],'b')\n    ax[0,0].set_yscale(\"log\")  \n    \n    ax[0,1].set_title('Real Earnings of Index')\n    ax[0,1].plot(t[index_start:],IndexRealE[index_start:],'g')\n    ax[0,1].set_yscale(\"log\")  \n    \n    PE = np.array(PE)    \n    ax[1,1].set_title('PE ratio')\n    ax[1,1].plot(t[index_start:],PE[index_start:],'r')\n\n    plt.figure(4)\n    ax[1,0].set_title('Stock Allocation')\n    ax[1,0].plot(t[index_start:-1],pi_plt[index_start:],'m')\n    \n    plt.subplots_adjust(hspace=.5)\n    plt.show()\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\nCode\nwith torch.no_grad():\n    fig, ax = plt.subplots(2, 2, figsize=(10, 5))\n\n    t = np.linspace(2021-T,2021,N_steps)\n\n    X_PE10_tens = torch.Tensor(N_steps)\n    torch.stack(list(X_PE10),out=X_PE10_tens)\n    X_PE10_plt = X_PE10_tens.numpy()\n    X_PE10_plt = X_PE10_plt[:,0,0]\n    \n    startyear = 1871\n    index_start = int((startyear-1871)/dt)\n    \n    piPE10_tens = torch.Tensor(N_steps-1)\n    torch.stack(list(pi_valPE10[0:-1]),out=piPE10_tens)\n    piPE10_plt = piPE10_tens.numpy()\n    piPE10_plt = piPE10_plt[:,0,0]\n\n    TR = np.array(TR)\n    TR = TR/TR[0]\n    ax[0,0].set_title('Backtest of PE timing (yellow) vs CAPE timing (cyan)')\n    ax[0,0].plot(t[index_start:],x_plt[index_start:]/x_plt[index_start],'y',\n                 t[index_start:],X_PE10_plt[index_start:]/X_PE10_plt[index_start],'c')\n    ax[0,0].set_yscale(\"log\")  \n    \n    ax[0,1].set_title('Real Earnings of Index')\n    ax[0,1].plot(t[index_start:],IndexRealE[index_start:],'g')\n    ax[0,1].set_yscale(\"log\")  \n    \n    PE10 = np.array(PE10)    \n    ax[1,1].set_title('PE10 ratio')\n    ax[1,1].plot(t[index_start:],PE10[index_start:],'c')\n\n    plt.figure(4)\n    ax[1,0].set_title('Stock Allocation')\n    ax[1,0].plot(t[index_start:-1],pi_plt[index_start:],'y',t[index_start:-1],piPE10_plt[index_start:],'c')\n    \n    plt.subplots_adjust(hspace=.5)\n    plt.show()\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\nCode\nplt.figure(1,(9.5,5))\nplt.title('Backtest of PE timing (yellow) vs CAPE timing (cyan) and 2x leveraged (blue)')\nplt.plot(t[index_start:],x_plt[index_start:]/x_plt[index_start],'y',\n             t[index_start:],X_PE10_plt[index_start:]/X_PE10_plt[index_start],'c',\n              t[index_start:],TR2[index_start:]/TR2[index_start],'b')\nplt.yscale(\"log\")\nplt.show()"
  },
  {
    "objectID": "logoptimal.html",
    "href": "logoptimal.html",
    "title": "Overview",
    "section": "",
    "text": "Introduction\nWe first introduce a general model and define the growth optimal portfolio associated to it. Such a portfolio can be also called Kelly or log optimal.\nFirst we define \\(S^i_t\\) to be the total return process of asset \\(i\\). This is so that dividends can be ignored. When we have options on the stock price and not the total return process, we can adjust as needed.\nWe start by defining a filtration \\(\\mathcal{F}_t\\) which represents the information in the market up to and including time \\(t\\). We then have\n\\[dS^i_t = \\mu^i_t dt + \\sum_{j=1}^M \\sigma^{i,j}_t dW^j_t.\\] for each \\(i \\in \\{1, \\cdots, N\\}\\) and also \\[dB_t = r_t B_tdt\\] for the money market account.\nIt is important to note that \\(\\mathcal{F}_t\\) is not the filtration generated by the Brownian motion, but one that contains it. \\(\\mu_t\\), \\(\\sigma_t\\), \\(r_t\\) are adapted to the filtration \\(\\mathcal{F_t}\\) – not just the Brownian motion. This means that they can depend on some outside information. This includes for instance, a stochastic volatility model as well as any others.\nThen generality of this model holds from the generality of \\(\\mu_t\\), \\(\\sigma_t\\), and \\(r_t\\). This allows for multiple sources of noise (so for instance we can think of APT models) and stochastic volatility.The model considered (HERE) for instance considers earnings and price to earnings multiple as exogenous processes and the stock price process is determined from these two. This would still fit in to this model. The reason the model maybe unrealistic is that it assumes that we actually do know the local mean rates of returns and volatilities at a given time having observed the information up and to this time.\nNow, we define a portfolio \\(\\pi_t = (\\pi^1_t , \\cdots, \\pi^N_t)\\) which is a process adapted to \\(\\mathcal{F}_t\\). We think of this portfolio in terms of the fraction of wealth allocated to each asset (intuitively: think \\(\\pi_t\\) represents the percentage allocations). The money market allocation will be \\(1 - \\sum_i \\pi^i_t\\), so that way no additional portfolio constraints must be introduced. With this notation, it is very easy to define self financing portfolios. It just corresponds to any choice of \\(\\pi_t = (\\pi^1_t , \\cdots, \\pi^N_t) \\in \\mathbb{R}^N\\) (we may want to choose a bounded set so things do not explode – this corresponds to leverage constraints). The self-financing portfolio associated to \\(\\pi\\), \\(V^\\pi\\), is easily represented in terms of portfolio return:\n\\[\\frac{dV_t^\\pi}{V_t^\\pi} = \\sum_{i=1}^N \\pi^i_t \\frac{dS^i_t}{S^i_t} + (1-\\sum_{i=1}^N \\pi^i_t) r_t dt\\]\nwhich gives\n\\[\\frac{dV_t^\\pi}{V_t^\\pi} = \\pi_t^T \\mu_t dt + \\pi_t^T \\sigma_t dW_t + (1-\\sum_{i=1}^N \\pi^i_t) r_t dt\\]\nwhere \\(\\mu = (\\mu^1 , \\cdots, \\mu^N)\\) and \\(\\sigma = (\\sigma^{i,j})_{i,j}\\). Without loss of generality, we take \\(V_0^\\pi = 1\\) unless stated otherwise.\nWe now can define the log-optimal portfolio as the argument maximizer out of admissible portfolio processes, \\((\\pi_t)\\), of the expression\n\\[\\mathbb{E}[\\log(V_t^\\pi)].\\]\n\n\nTheorems\n\nTheorem 1 Assume that the claim \\(\\xi\\) is attainable. Then its unique arbitrage price is given by \\[\\frac{\\Pi(t ; \\xi)}{V^{\\pi^*}_T} = \\mathbb{E}^{\\mathbb{P}}\\left[ \\frac{\\xi}{V^{\\pi^*}_T} \\bigg{|} \\mathcal{F}_t \\right] \\] That is, the log-optimal portfolio process is the appropriate numeraire such that option pricing is simply the true expected value (under the real world measure \\(\\mathbb{P}\\)!) In other words, if the units of account were simply not dollars, or not bank account, but instead units of log-optimal portfolio, we could simply understand option pricing in the most naive way possible (the expectation of the payout under the true measure)… and it would turn out to be right!\n\nThese results are somewhat known but surprisingly somewhat unknown. Theorem 2 in particular. One can do options pricing without realizing that Theorem 2 provides an alternative method all along for very general models and very general attainable claims.\nLastly, the problem with Theorem 2 is that \\(\\xi\\) needs to be attainable. But what if \\(\\xi\\) is generally unattainable as would be the case for generic claims in a model when \\(M &gt; N\\) for instance when there are more noises than assets. This is a real world setting. However, we can borrow from utility theory. The idea is that although a claim cannot be hedged, its marginal addition to a portfolio would either add or remove utility for a given investor. This investor (identified by their utility function) has a price of the option such that the marginal utility associate with the addition of the option is \\(0\\). This would be the investor’s utility price for the option.\nTo make this more rigorous:\n\n** Definition 1 ** Consider a claim that pays out \\(\\xi_T\\) at time \\(T\\). Let \\((U_\\alpha,T)\\) be the investor’s utility function (indexed by \\(\\alpha\\)) for horizon \\(T\\). This means that the investor selects a portfolio strategy \\(\\pi(\\alpha)\\) such that \\(\\mathbb{E}[ U_\\alpha(V^\\pi_T)]\\) is maximized.\nThen the price \\(\\xi_0(\\alpha)\\), called investor \\((U_\\alpha,T)\\)’s indifference price for a marginal quantity, satisfies: \\[\\frac{d}{d\\epsilon} \\bigg{|}_{\\epsilon = 0} \\mathbb{E}\\bigg[ U_\\alpha \\left( (1-\\epsilon)V^{\\pi(\\alpha)}_T + \\epsilon \\frac{\\xi_T}{\\xi_0(\\alpha)} \\right) \\bigg] = 0.\\]\nThis can be reduced and we write \\[\\xi_0(\\alpha) = \\frac{\\mathbb{E}\\bigg[ U_\\alpha ' \\left( V^{\\pi(\\alpha)}_T \\right) \\xi_T \\bigg]}{\\mathbb{E}\\bigg[ U_\\alpha ' \\left( V^{\\pi(\\alpha)}_T \\right) V^{\\pi(\\alpha)}_T \\bigg] }.\\]\n\nNow we have the very powerful result.\n\nTheorem 2 Let \\((U_\\gamma,T)\\) be the investor’s utility function for time horizon \\(T\\). In this case we take \\(U_\\gamma\\) to be any CRRA utility function \\(U_\\gamma(x) = \\gamma x^\\gamma\\) for \\(\\gamma &lt; 1\\). We claim that \\(\\xi_0(\\gamma)\\) does not depend on \\(\\gamma\\) and moreover,\n\n\\[\\chi_0(\\alpha) = \\chi_0 = \\mathbb{E}^{\\mathbb{P}}\\left[ \\frac{\\chi_T}{V^{\\pi^*}_T} \\right].\\]"
  },
  {
    "objectID": "logoptimal1.html",
    "href": "logoptimal1.html",
    "title": "Log-Optimal And Risk Neutral Valuation – The Basics",
    "section": "",
    "text": "I am assuming the reader is well-versed in stochastic calculus and knows the foundational results on arbitrage pricing of contingent claims. Those that are familiar are used to the risk-neutral valuation of an option – that is the options price is just the expected value of its discounted payoff under the risk neutral measure. What I aim to do is illustrate a really nice result that allows one to price the option under the true physical measure. Rather than doing this with a choice of stochastic discount factor, we do it with a choice of portfolio value. It turns out that the log-optimal portfolio, the portfolio that maximizes log-utility, is the unique portfolio such that option pricing is just the expected value of the payout under the true physical measure with the caveat that the portfolio is not measured in dollars, or in units of bank account, but instead in units of the log-optimal portfolio.\nThis is just the beginning. What I am to do is show that this result holds in a very general setting. At first, we will show that this holds for the typical Black-Scholes-Merton model of the markets. Then we will show this result holds for all attainable claims for a general class of market models (which includes models such as stochastic volatility and much more). This is not in contradiction to the traditional results that shows infinitely many EMM for incomplete markets as the log-optimal numeraire induced pricing corresponds to one of the infinite EMM in this case. However, in our last section, we go one step further and price claims that are unattainable. You might say this is impossible! Indeed from the perspective of arbitrage pricing, it is impossible, as one cannot hedge (by definition) and unattainable claim. However, from the perspective of expected utility theory, this does not mean that a given person would not have a desire to allocate to a given claim given the right entry price. In fact, we will show that if one defines the price of a claim (for a given person) such that they are indifferent to owning a small amount of claim at that price, then we have the result that the price of the option is still the expected payout (under the physical measure) of the option in units of the log-optimal portfolio.\nI will say this is not anything new, but finding these results can be very difficult as there is some, but not much said on this topic especially as one adds more and more generality. My derivations are that of my own and are meant to be simple. This was created by my own exploration and rediscovery of these results and I am presenting my own past excursion in deriving them not knowing they existed in the first place."
  },
  {
    "objectID": "logoptimal1.html#simple-verification",
    "href": "logoptimal1.html#simple-verification",
    "title": "Log-Optimal And Risk Neutral Valuation – The Basics",
    "section": "Simple verification",
    "text": "Simple verification\nWe must show that the portfolio \\(\\pi^*_t = \\frac{\\mu-r}{\\sigma^2} = \\frac{\\lambda}{\\sigma}\\) produces the portfolio value such that value\\(\\frac{V^{\\pi^*}_T}{V^{\\pi^*}_t} = e^{(r+\\lambda)(T-t) + \\frac{1}{2} \\lambda^2 (W_T-W_t)}\\) This is simple as we have\n\\[\n\\frac{dV^{\\pi^*}_t}{V^{\\pi^*}_t} = [r+\\pi^*_t (\\mu-r)] dt + \\pi^*_t \\sigma dW_t.\n\\] Now, inputting \\(\\pi^*_t = \\frac{\\mu-r}{\\sigma^2} = \\frac{\\lambda}{\\sigma}\\), we see\n\\[\n\\frac{dV^{\\pi^*}_t}{V^{\\pi^*}_t} = (r + \\lambda^2) dt + \\lambda dW_t.\n\\] This is a simple geometric Brownian motion. Solving with the initial value \\(V^{\\pi^*}_t\\), we get\n\\[V^{\\pi^*}_T = V^{\\pi^*}_t \\exp\\left( (r + \\frac{1}{2} \\lambda^2)(T-t) + \\lambda (W_T - W_t)\\right),\\]\nand hence the result holds."
  },
  {
    "objectID": "logoptimal1.html#log-optimality-of-the-portfolio",
    "href": "logoptimal1.html#log-optimality-of-the-portfolio",
    "title": "Log-Optimal And Risk Neutral Valuation – The Basics",
    "section": "Log optimality of the portfolio",
    "text": "Log optimality of the portfolio\nWe can show that the portfolio is the so-called log-optimal portfolio in two different ways. Both are easy so we might as well do it here. The first way is a direct construction. First we define the log-optimal portfolio to be the portfolio that maximizes the expected log-utility i.e.\n\\[\n\\pi^* = \\arg \\max_{\\pi} \\mathbb{E} [\\log(V^\\pi_T)].\n\\]\n\nIndirect Proof\nWe already have shown that that the portfolio \\(\\pi^*_t = \\frac{\\mu-r}{\\sigma^2} = \\frac{\\lambda}{\\sigma}\\) produces the portfolio value such that value\\(\\frac{V^{\\pi^*}_T}{V^{\\pi^*}_t} = e^{(r+\\lambda)(T-t) + \\frac{1}{2} \\lambda^2 (W_T-W_t)}\\) and thus \\[\n\\Pi(t;X) =   \\mathbb{E}^\\mathbb{P} \\left[ \\frac{X}{V^{\\pi^*}_T/V^{\\pi^*}_t} \\Bigg| \\mathcal{F}_t \\right].\n\\] At this point, we don’t know that \\(\\pi^*\\) is log-optimal, but we know the pricing formula is true from our previous work. Now we let \\(\\pi\\) be an arbitrary portfolio. Assume \\(V^\\pi_0 = V^{\\pi^*}_0\\) meaning that they start with the same initial amount. We have that\n\\[\n\\Pi(t;V^\\pi_t) = V^\\pi_t =   \\mathbb{E}^\\mathbb{P} \\left[ \\frac{V^\\pi_T}{V^{\\pi^*}_T/V^{\\pi^*}_t} \\Bigg| \\mathcal{F}_t \\right].\n\\] which gives in particular at \\(t=0\\)\n\\[\n1  =  \\frac{V^\\pi_0}{V^{\\pi^*}_0} =  \\mathbb{E}^\\mathbb{P} \\left[ \\frac{V^\\pi_T}{V^{\\pi^*}_T} \\right].\n\\]\nNow taking \\(\\log(\\cdot)\\) of both sides, and applying Jensen’s inequality, we get\n\\[    \\mathbb{E}^\\mathbb{P} \\left[ \\log \\left( \\frac{V^\\pi_T}{V^{\\pi^*}_T}\\right)\\right] \\leq \\log \\left( \\mathbb{E}^\\mathbb{P} \\left[ \\frac{V^\\pi_T}{V^{\\pi^*}_T} \\right] \\right)  = 0, \\] and hence we conclude that \\[\n\\mathbb{E}^\\mathbb{P} \\left[ \\log \\left( V^\\pi_T\\right)\\right] \\leq \\mathbb{E}^\\mathbb{P} \\left[ \\log \\left( V^{\\pi^*}_T\\right)\\right], \\ \\forall \\pi = (\\pi_t)_t.\n\\] In otherwords, \\(\\pi^*\\) is indeed the log-optimal portfolio.\nWhat we have shown is that if a portfolio has the so-called “numeraire-property” for \\(\\mathbb{P}\\), then it is log-optimal. This is a very general result. Here the numeraire property means that it is the choice of numeraire such that every asset becomes a \\(\\mathbb{P}\\) martingale in units of this numeraire.\nSince our considered portfolio (which we didn’t yet know was log-optimal), was known to have the numeraire-property for \\(\\mathbb{P}\\), we concluded that it was necessarily log-optimal. Surprisingly, we have proven the exact form of the log-optimal portfolio without even constructing it explicitly!\n\n\nConstruction\nNow we construct the log-optimal portfolio explicitly since it does not require much effort and as a second argument for those not entirely convinced.\nA typical approach is to solve the stochastic optimal control problem via the Hamilton-Jacobi-Bellman equation. This is actually overkill for this problem and it is very easy to derive from a direct computation. Simply, lets compute \\(\\mathbb{E} [\\log(V^\\pi_T)]\\) for an arbitrary portfolio \\((\\pi_t)_t\\). We have that for any admissible \\((\\pi_t)_t\\), we have that\n\\[\n\\frac{dV^{\\pi}_t}{V^{\\pi}_t} = [r+\\pi_t (\\mu-r)] dt + \\pi_t \\sigma dW_t.\n\\] This has the solution\n\\[V^\\pi_T = V^\\pi_0\\exp \\left( \\int_0^T [r+\\pi_t (\\mu-r) - \\frac{1}{2} \\sigma^2 \\pi_t^2 ] dt  + \\int_0^T \\pi_t \\sigma dW_t \\right).\\]\nTaking \\(\\log\\) and the expectation, we get:\n\\[\\mathbb{E}[\\log(V^\\pi_T)] = \\log(V^\\pi_0) +  \\mathbb{E} \\left[ \\int_0^T [r+\\pi_t (\\mu-r) - \\frac{1}{2} \\sigma^2 \\pi_t^2 ] dt \\right].\\] Now, we seek to maximize the following expression. This may seem non-trivial at first, but carefully inspecting, we see the integrand is just a constant coefficient degree \\(2\\) polynomial in \\(\\pi_t\\). This can be maximized point-wise for all \\(t\\) and \\(\\omega\\). Maximizing the integrand, we have \\(\\pi_t = \\frac{\\mu-r}{\\sigma^2}\\) as claimed.\nIn case one is suspect of this maximization, we can note that\n\\[\nr+ (\\mu-r)x  - \\frac{1}{2} \\sigma^2 x^2   \\leq r + (\\mu-r) \\left( \\frac{\\mu-r}{\\sigma^2} \\right)   - \\frac{1}{2} \\left( \\frac{\\mu-r}{\\sigma^2}\n\\right)^2, \\ \\forall x \\in \\mathbb{R}\n\\] by the optimization of a second degree polynomial. Then, since \\(\\pi_t(\\omega) \\in \\mathbb{R}\\), the bound holds pointwise for all \\(t\\) and \\(\\omega\\), i.e.,\n\\[\nr+ (\\mu-r)\\pi_t(\\omega)  - \\frac{1}{2} \\sigma^2 \\pi_t(\\omega)^2   \\leq r + (\\mu-r) \\left( \\frac{\\mu-r}{\\sigma^2} \\right)   - \\frac{1}{2} \\left( \\frac{\\mu-r}{\\sigma^2}\n\\right)^2,\n\\]\nThus taking integral and expectation over the inequality, we get \\[\n\\mathbb{E} \\left[ \\int_0^T [ r+ (\\mu-r)\\pi_t(\\omega)  - \\frac{1}{2} \\sigma^2 \\pi_t(\\omega)^2 ] dt \\right]  \\leq \\mathbb{E} \\left[ \\int_0^T [ r + (\\mu-r) \\left( \\frac{\\mu-r}{\\sigma^2} \\right)   - \\frac{1}{2} \\left( \\frac{\\mu-r}{\\sigma^2}\\right)^2 ]dt \\right].\n\\]\nBut since the constant control \\(\\pi_t = \\frac{\\mu-r}{\\sigma^2}\\) is admissible (it is a constant control thus it can trivially be decided based on the information at time \\(t\\)), we see that the bound is attained.\nThus indeed we have that \\(\\pi_t = \\pi^*_t = \\frac{\\mu-r}{\\sigma^2}\\) is the log-optimal portfolio."
  },
  {
    "objectID": "logoptimal3.html",
    "href": "logoptimal3.html",
    "title": "Log Optimal Numeraire in Incomplete Markets",
    "section": "",
    "text": "What we will now show is a very interesting result regarding the pricing under the log-optimal numeraire. So far, we have shown for a very general model, that the pricing\n\\[\n\\Pi(t;X) = \\mathbb{E}^\\mathbb{P} \\left[ \\frac{X}{V^{\\pi^*}_T/V^{\\pi^*}_t} \\Bigg| \\mathcal{F}_t \\right]\n\\] holds for all attainable claims \\(X\\) where \\(\\pi^*\\) is the log-optimal portfolio process and \\(V^{\\pi^*}\\) its corresponding portfolio value. This exciting results means that the naive pricing can be done under the physical measure \\(\\mathbb{P}\\) as long as we were denoting everything to be in the “right” units of “currency” (or numeraire) – which happens to be the log-optimal portfolio.\nAlthough an exciting result, there are two main problems this faces for practical implementation. The first is that it is actually hard to achieve the growth optimal portfolio as one would have to know the local rates of mean return, volatilities (across all differing possible sources of noise), and money market rate – \\(\\mu_t\\), \\(\\sigma_t\\), \\(r_t\\) at each time. Although these values are themselves random, the model we consider (a generalization of Black-Scholes, local volatility, stochastic volatility, and much else) still assumes that at time \\(t\\) we know what those values are at that instant (although we don’t know the resulting shocks due to the noise). Specifying the “ground truth” (random) model is very, very hard in reality!\nWe will not address this claim. Instead we will deal with a secondary problem. What we have shown so far is a pricing for attainable claims. For unattainable claims (ones we cannot hedge), we may still find a derivative (long or short) compelling based on the price. Thus although one cannot hedge the option, one can still assign their personal value to the option. If the option (at the observed price) adds value to their portfolio, then the investor will buy the option. If not, they will sell the option.\nUsing utility theory, it is very easy to understand when the investor gains from buying or selling the option. Suppose \\(\\pi\\) is the optimal portfolio (among presently traded securities) for an investor with utility function \\(U\\). All of a sudden, an option \\(\\chi\\) comes on the market. The option will payout \\(\\xi_T\\) at time \\(T\\) and can be bought/sold for \\(\\chi_0\\). Without loss of generality, assume \\(V^\\pi_0 = 1\\). The investor will be interested (in a small amount) of the option if the initial price \\(\\chi_0\\) is such that their expected utility increases by of their current (utility optimal) portfolio for the option. If the option price is such that their expected utility decreases by adding a small amount of option, then we can show the investor would be interested in the short option position. Thus, we can price (an infinitely small amount of option) for the investor as the price such that they are indifferent to adding a small amount of option to their portfolio."
  },
  {
    "objectID": "logoptimal3.html#the-computation",
    "href": "logoptimal3.html#the-computation",
    "title": "Log Optimal Numeraire in Incomplete Markets",
    "section": "The computation",
    "text": "The computation\nAs before, we assume the following model for \\(I\\) risk assets:\n\\[\\frac{dV^\\pi_t}{V^\\pi_t} = \\sum_{i=1}^I \\frac{dS^i_t}{S^i_t}\\] driven by \\(J\\) noises so as to get \\[ \\frac{dS^i_t}{S^i_t} = \\mu^i_t dt + \\sum_{j=J}^m \\sigma^{ij}_t dW^j_t.\\] Notice how we are temporarily ignoring \\(r_t\\). This can be easily included but it can also be easily excluded by transforming all price processes by using the (temporary) bank account numeraire. This can be easily worked out. The main thing is that the asset local mean returns are understood now as \\(\\mu^i_t - r_t\\) (since they are discounted by the bank account). Also, \\((\\pi^i_t)\\) need not add up to \\(1\\) as the remaining amount is taken to be borrowings. This does not enter the immediate picture for dynamics but will play a role when one converts back to units of currency and not bank account. Anyway, with this out of the way we can compute:\n\\[d \\log((V^{\\pi_\\gamma}_t)^\\gamma) = \\gamma\\frac{dV^{\\pi_\\gamma}_t}{V^{\\pi_\\gamma}_t} - \\frac{1}{2} \\gamma \\left(\\frac{dV^{\\pi_\\gamma}_t}{V^{\\pi_\\gamma}_t} \\right)^2.\\]\nThis gives\n\\[ (V^{\\pi_\\gamma}_T)^\\gamma = \\exp \\left[ \\int_0^T \\gamma \\left(  \\pi_t^T \\mu_t -   \\frac{1}{2} \\pi_t^T \\sigma_t \\sigma_t^T \\pi_t \\right) dt + \\int_0^T \\gamma \\pi_t^T \\sigma_t d\\vec{W}_t \\right] .\\]\nSo\n\\[\\mathbb{E}[U(V^{\\pi_\\gamma}_T)] = \\mathbb{E}[\\gamma (V^{\\pi_\\gamma}_T)^\\gamma] = \\gamma \\exp \\left[ \\int_0^T  \\left(  \\gamma \\pi_t^T \\mu_t -   (\\frac{1}{2}\\gamma - \\frac{1}{2}\\gamma^2)  \\pi_t^T \\sigma_t \\sigma_t^T \\pi_t \\right) dt \\right].\\]\nSo if \\(Ker(\\sigma^T) = \\varnothing\\) then the optimal portfolio occurs at \\[ \\pi_t = \\frac{1}{1-\\gamma}(\\sigma_t \\sigma_t^T)^{-1} \\mu_t,\\] which corresponds to \\(\\pi_t = \\frac{1}{1-\\gamma}(\\sigma_t \\sigma_t^T)^{-1} (\\mu_t - r_t \\vec{1})\\) under the appropriate transformation of \\(\\mu_t\\) understood to be the currency mean rate of return of stocks rather than the bank account numeraire denominated mean rate of return.\nIn reality, \\(Ker(\\sigma^T) = \\varnothing\\) which corresponds to absence of arbitrage in the underlying assets, and thus we have the unique portfolio strategy for each given risk preference. With everything somewhat explicit, we can easily compute the indifference price\n\\[\\chi_0 = \\frac{\\mathbb{E} \\left[ U'(V^{\\pi_\\gamma}_T) \\chi_T \\right]}{\\mathbb{E} \\left[ U'(V^{\\pi_\\gamma}_T) V^{\\pi_\\gamma}_T\\right]}\\]\nand show it is the same for each \\(\\gamma\\).\nFirst, notice the CRRA utility satisfies \\(U'(V^{\\pi_\\gamma}_T) = \\gamma \\frac{U(V^{\\pi_\\gamma}_T)}{V^{\\pi_\\gamma}_T}\\). This allows us to write:\n\\[\\chi_0 = \\frac{\\mathbb{E} \\left[ U(V^{\\pi_\\gamma}_T) \\frac{\\chi_T}{V^{\\pi_\\gamma}_T} \\right]}{\\mathbb{E} [ U(V^{\\pi_\\gamma}_T)]} = \\mathbb{E} \\left[ \\frac{U(V^{\\pi_\\gamma}_T)}{\\mathbb{E} [ U(V^{\\pi_\\gamma}_T)]} \\frac{\\chi_T}{V^{\\pi_\\gamma}_T} \\right].\\]\nFirst\n\\[ V^{\\pi_\\gamma}_T = \\exp \\left[ \\int_0^T\\left(  \\pi_t^T \\mu_t -   \\frac{1}{2} \\pi_t^T \\sigma_t \\sigma_t^T \\pi_t \\right) dt + \\int_0^T  \\pi_t^T \\sigma_t d\\vec{W}_t \\right] \\]\nwhere \\(\\pi_t = \\frac{1}{1-\\gamma}(\\sigma_t \\sigma_t^T)^{-1} \\mu_t\\). So we have\n\\[ V^{\\pi_\\gamma}_T = \\exp \\left[ \\int_0^T \\frac{\\frac{1}{2} - \\gamma}{(1-\\gamma)^2} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt + \\int_0^T \\frac{1}{1-\\gamma} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t  \\right] .\\]\nNext\n\\[ (V^{\\pi_\\gamma}_T)^\\gamma = \\exp \\left[ \\int_0^T \\gamma \\frac{\\frac{1}{2} - \\gamma}{(1-\\gamma)^2} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt + \\int_0^T \\frac{\\gamma}{1-\\gamma} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t  \\right] .\\]\nTherefore\n\\[\\frac{U(V^{\\pi_\\gamma}_T)}{\\mathbb{E} [ U(V^{\\pi_\\gamma}_T)]} = \\exp \\left[ \\int_0^T -\\frac{1}{2}\\left(\\frac{\\gamma}{1-\\gamma} \\right)^2 \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt + \\int_0^T \\frac{\\gamma}{1-\\gamma} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t  \\right]\\]\nThus\n\\[ \\frac{U(V^{\\pi_\\gamma}_T)}{\\mathbb{E} [ U(V^{\\pi_\\gamma}_T)]} \\frac{1}{V^{\\pi_\\gamma}_T}   =   \\exp \\left[ \\int_0^T \\frac{-1}{2} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt - \\int_0^T \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t  \\right]\\]\nand hence the indifference price is then:\n\\[\\chi_0 = \\mathbb{E} \\left[ \\frac{U(V^{\\pi_\\gamma}_T)}{\\mathbb{E} [ U(V^{\\pi_\\gamma}_T)]} \\frac{\\chi_T}{V^{\\pi_\\gamma}_T} \\right] = \\mathbb{E} \\left[ \\frac{\\chi_T}{\\exp \\left[ \\int_0^T \\frac{1}{2} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt + \\int_0^T \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t  \\right]}  \\right].\\]\nLastly note that the log-optimal portfolio corresponds to\n\\[\\pi^*_t = (\\sigma_t \\sigma_t^T)^{-1} \\mu_t\\] and its corresponding portfolio process is \\(V^{\\pi^*}_T = \\exp \\left[ \\int_0^T \\frac{1}{2} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt + \\int_0^T \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t \\right]\\).\nThus each CRRA investor has the indifference price:\n\\[\\chi_0 = \\mathbb{E} \\left[ \\frac{\\chi_T}{\\exp \\left[ \\int_0^T \\frac{1}{2} \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\mu_t dt + \\int_0^T \\mu_t^T (\\sigma_t \\sigma_t^T)^{-1} \\sigma_t d\\vec{W}_t  \\right]}  \\right] = \\mathbb{E} \\left[ \\frac{\\chi_T}{V^{\\pi^*}_T} \\right],\\]\nEVEN in the case of non-attainable claims."
  },
  {
    "objectID": "logoptimal2.html",
    "href": "logoptimal2.html",
    "title": "Log-Optimal And Risk Neutral Valuation – The General Case",
    "section": "",
    "text": "We consider \\(I\\) assets whose price dynamics are affected by \\(J\\) noises. In reality, \\(J&gt;&gt;I\\) as there are many more noises than assets.\nStock \\(i\\)’s dynamics are given by\n\n\\[\n\\frac{dS^i_t}{S^i_t} = \\mu^i_t dt + \\sum_{j=1}^J \\sigma^{ij}_t dW^j_t\n\\]\n\n\\(\\mu^i_t\\) is the mean rate of return of stock \\(i\\) which itself is stochastic.\n\\(\\sigma^{ij}_t\\) is the volatility of stock \\(i\\) associated to the noise \\(j\\).It itself is also potentially stochastic.\nLastly there is an interest rate \\(r_t\\) for a money-market account (which is also stochastic) and such that\nWe will use the notation \\(\\sigma_t = (\\sigma^{ij}_t)\\) and \\(\\mu_t = (\\mu^1_t, \\cdots, \\mu^I_t)\\).\nTo be precise, we have \\(\\sigma_t,r_t,\\mu_t\\) are all \\(\\mathcal{F}_t\\)-adapted where \\(\\mathcal{F}_t\\) is the sigma algebra generated by the Brownian motion \\(W_t = (W^1_t, \\cdots, W^J_t)\\). At first this seems restrictive, we would want them to be general. However, this includes many such models. At first glance, one might not think stochastic volatility, for example, is included in this model as the volatility is not adapted to the Brownian motion of the stock! However, for stochastic volatility, we would merely need to do \\(\\frac{dS_t}{S_t} = \\mu dt + \\sigma_t dW^1_t + 0 dW^2_t\\) and \\(\\sigma_t\\)’s dynamics are given in terms of \\(W^2_t\\). Thus it is not adapted to the “Brownian motion” of the stock, but it is \\(\\mathcal{F}_t\\) adapted which allows us to do stochastic integration etc.. Thus actually the condition that \\(\\sigma_t,r_t,\\mu_t\\) are all \\(\\mathcal{F}_t\\)-adapted can lead to very broad models and we will examine just a few toward the end.\nNow we consider a portfolio which invests the fraction of wealth \\(\\pi^i_t\\) into stock \\(i\\) at time \\(t\\). We require \\(\\pi^i_t\\) be \\(\\mathcal{F}_t\\)-adapted and bounded. We also require that \\(\\sigma_t,r_t,\\mu_t\\) are defined such that \\(S^i_t\\), \\(e^{\\int_0^T r_s ds}\\) are bounded and the covariance matrix \\((\\sigma_t\\sigma_t^T)\\) is non-singular and that its minimal eigenvalue is uniformly bounded (for all \\(t\\)) by some \\(\\epsilon &gt; 0\\) as well as its maximal eigenvalue be uniformly bounded from above . Then taking portfolio processes such that \\(|\\pi_t| \\leq K\\) for all \\(t\\), we have that all \\(\\mathbb{Q}\\) - local martingale portfolio values are actually \\(\\mathbb{Q}\\)-martingales. Then by the eigenvalue bounds on the covariance matrix, one will see that the log-optimal portfolio is also such that \\(|\\pi^*_t| \\leq K\\) for all \\(t\\). This formalizes our approach below.\n\nWe say \\(\\pi = (\\pi^1, \\cdots, \\pi^I)\\) and \\(1 - \\pi_t^T \\vec{1}\\) is invested into the money market at time \\(t\\). Note that we do not distinguish vectors and scalars with a notation other than the case with \\(1\\) vs \\(\\vec{1}\\).\n\nThe portfolio process associated to \\(\\pi\\) we call \\(V^\\pi_t\\) and it is described through its return:\n\n\\[\n\\frac{dV^\\pi_t}{V^\\pi_t} = \\sum_{i=1}^n \\pi^i_t \\frac{dS^i_t}{S^i_t} + (1 - \\pi_t^T \\vec{1})r_t dt,\n\\] which can be written as\n\\[\n\\frac{dV^\\pi_t}{V^\\pi_t} = [r_t + \\pi_t^T(\\mu_t - \\vec{1}r_t)]dt +  \\pi_t^T \\sigma_t dW_t.\n\\]"
  },
  {
    "objectID": "logoptimal2.html#constructing-the-numeraire-portfolio",
    "href": "logoptimal2.html#constructing-the-numeraire-portfolio",
    "title": "Log-Optimal And Risk Neutral Valuation – The General Case",
    "section": "Constructing the numeraire portfolio",
    "text": "Constructing the numeraire portfolio\nWe can try to find such a numeraire portfolio \\(\\tilde{\\pi}\\), i.e. a portfolio such that \\(\\left( V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)_t\\) is a \\(\\mathbb{P}\\) martingale for all portfolios \\(\\pi\\), by demanding that \\(d\\left( V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)\\) is driftless. Equivalently, we require \\(\\frac{d\\left(V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)}{V_t^\\pi/V_t^{\\tilde{\\pi}}}\\) is driftless. (Note this is the portfolio \\(\\pi\\)’s return in units of \\(V_t^{\\tilde{\\pi}}\\) which will be useful to compute. As a general trick, when working with a portfolio process, it is often easiest to work in terms of its return. When working with a ratio of assets, the ratio represents the price of one in terms of units of the other and thus itself represents a price process. When working with this new price process it is often useful to work in terms of its return.)\nNow let’s construct the numeraire portfolio. We wish to find \\(\\tilde{\\pi}\\) such that for all \\(\\pi\\), we have\n\\[\\frac{d\\left(V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)}{V_t^\\pi/V_t^{\\tilde{\\pi}}}\\] is driftless. Hence \\((V_t^\\pi/V_t^{\\tilde{\\pi}})\\) will be a \\(\\mathbb{P}\\) martingale.\nFirst, by Ito’s lemma, we have\n\\[\\frac{d\\left(V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)}{V_t^\\pi/V_t^{\\tilde{\\pi}}} = \\frac{dV^\\pi_t}{V^\\pi_t} - \\frac{dV^\\tilde\\pi_t}{V^\\tilde\\pi_t} +  \\left(\\frac{dV^\\tilde\\pi_t}{V^\\tilde\\pi_t} \\right)^2 - \\frac{dV^\\tilde\\pi_t dV^\\pi_t}{V^\\tilde\\pi_t V^\\pi_t}.\\]\nThe surprising cleanliness of the above equation is due to the fact that we are working with a highly relevant quantity – the return of one portfolio in units of another (or the relative return). Substituting for the portfolio returns and factoring, we have\n\\[\\frac{d\\left(V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)}{V_t^\\pi/V_t^{\\tilde{\\pi}}} = (\\pi_t - \\tilde{\\pi}_t)^T \\left((\\mu_t - \\vec{1}r_t) dt + \\sigma_t dW_t - \\sigma_t \\sigma_t^T \\tilde{\\pi_t} dt\\right) .\\]\nThus it is driftless if and only if\n\\[ (\\pi_t - \\tilde{\\pi}_t)^T \\left((\\mu_t - \\vec{1}r_t)  - \\sigma_t \\sigma_t^T \\tilde{\\pi_t}\\right) = 0.\\]\nWe need to find a \\(\\tilde{\\pi}\\) such that the above holds for all \\(\\pi\\). This can be done for each \\(t\\). Denote \\(x=\\pi_t\\), \\(y=\\tilde{\\pi}_t\\), \\(b = (\\mu_t - \\vec{1}r_t)\\) and \\(A = \\sigma_t \\sigma_t^T\\). We note that by our original assumptions, \\(A\\) is invertible.\nWe now have the problem find \\(y\\) such that for all \\(x\\) it holds:\n\\[\n(x-y)^T(b-Ay) = 0.\n\\] First, since \\(A\\) is invertible, we can choose \\(y = A^{-1}b\\) and we are done. However, one might wonder about uniqueness. This \\(y\\) is infact unique as the above has to hold for all \\(x\\). We can choose the particular choice \\(x = b - Ay + y\\) which shows that \\(||b-Ay||^2 = 0\\) and hence \\(y = A^{-1}b\\) is the only solution. What this means is that\n\\[\\tilde{\\pi}_t =  (\\sigma_t \\sigma_t^T)^{-1} (\\mu_t - \\vec{1}r_t)\\] is the only numeraire portfolio.\nThis shows that when the problem is arbitrage free, there exists a unqiue numeraire portfolio \\(\\tilde{\\pi} = (\\sigma_t \\sigma_t^T)^{-1} (\\mu_t - \\vec{1}r_t)\\). With this portfolio we have, \\(\\left( V_t^\\pi/V_t^{\\tilde{\\pi}} \\right)_t\\) is a \\(\\mathbb{P}\\) martingale for all portfolios \\(\\pi\\) which gives the relation of all portfolios:\n\\[\n\\frac{V^\\pi_t}{V^{\\tilde\\pi}_t} = \\mathbb{E}^\\mathbb{P} \\left[ \\frac{V^\\pi_T}{V^{\\tilde\\pi}_T} \\Bigg| \\mathcal{F}_t \\right]\n\\]\nand hence for all attainable claims \\[\n\\Pi(t;X) = \\mathbb{E}^\\mathbb{P} \\left[ \\frac{X}{V^{\\tilde\\pi}_T/V^{\\tilde\\pi}_t} \\Bigg| \\mathcal{F}_t \\right].\n\\] This portfolio turns out to be the log-optimal portfolio. This is easily seen as taking \\(V^\\pi_0 = V^{\\tilde\\pi}_0\\) (i.e. the portfolio values start with the same initial wealth), we have\n\\[\n1 = \\mathbb{E}^\\mathbb{P} \\left[ \\frac{V^\\pi_T}{V^{\\tilde\\pi}_T} \\right].\n\\]\nTaking log and applying Jensen’s inequality will give that\n\\[\n  \\mathbb{E}^\\mathbb{P} \\left[\\log(V^\\pi_T)\\right] \\leq \\mathbb{E}^\\mathbb{P} \\left[\\log(V^{\\tilde{\\pi}}_T) \\right], \\quad \\forall \\pi,\n\\] hence the numeraire portfolio is the log-optimal portfolio."
  },
  {
    "objectID": "logoptimal1.html#technical-details-an-excuse-for-the-simplicity",
    "href": "logoptimal1.html#technical-details-an-excuse-for-the-simplicity",
    "title": "Log-Optimal And Risk Neutral Valuation – The Basics",
    "section": "Technical Details – An Excuse for the Simplicity",
    "text": "Technical Details – An Excuse for the Simplicity\nIn general, the details of this theory would be quite hard. We will use some results that greatly simplify things."
  },
  {
    "objectID": "index.html#blog-projects-and-research",
    "href": "index.html#blog-projects-and-research",
    "title": "About",
    "section": "Blog Projects and Research",
    "text": "Blog Projects and Research\nThroughout my PhD research, there have been some (re)discoveries of mine that fascinated me. I wanted to document and share these discoveries – primarily so I could remember the result and underlying derivations, but also to share with others the same joy I found in certain discoveries. I appreciate a new perspective as long as it encapsulates what is true. I found this case in my study of the log-optimal portfolio and how it can be used to price options under \\(\\mathbb{P}\\), the true physical measure. I won’t spoil the surprise for now, but I found the underlying math to be fascinating as well as it’s implication for an intuitive viewpoint of option pricing!\nAt the same time, I wanted to showcase some of the small-time applied research I have done outside of my PhD for my own fun. I studied the SP500 valuation market cycle and modeled it according to a mean-reverting stochastic process for the earnings yield. With this new model, I considered optimal portfolios to see 1) the viability of this model throughout history 2) to showcase an optimization methodology based on neural networks that can be applied to more realistic models.\n\nLog-Optimal Portfolio and Option Pricing\nTraditionally, financial derivatives are priced as their discounted payout under a risk neutral measure. I was intrigued by an approach that I (re)discovered which showed the price of the derivative is actually its payout under the physical measure when a certain unit of account (or numeraire) was considered. Basically, if one takes as unit of account the so-called “growth-optimal portfolio”, then the option’s price is exactly the expected value of the option’s payout under the true physical measure! In other words, pricing a derivative/security/asset in units of growth-optimal portfolio naturally discounts for risk and time! Not only is this true, but it is true in very general senses. For my own derivations, I have shown this to be true for the traditional Black-Scholes model, a generalized model for all attainable claims, and even true for a utility based pricing in the case of unattainable claims!\n\n\nKelly Optimality throughout Market Cycles\nNext, I am highly interested in finding long-term alphas through exploiting macro inefficiencies. I believe that asset prices become irrationally high and irrationally low throughout periods of time. I also believe that this can be very tricky to understand when it is the case and the time it can take for mean-reversion results in tremendous risk for a “macro-arbitrageur” who can be wrong for extended periods of time. In retrospect, we can point to a 2000 where the stock-market experienced a Shiller CAPE ratio of 44 while the US 30 year TIPs yielded over 4% real! The reality of the situation ultimately pointed to the fact that valuations of the SP500 were absurd relative to the high (real and nominal) yields offered by ultra-low default risk US treasury bonds, however it is always obvious in retrospect. But this begs the question, what is the fair price of equities and how can this change over time? How should one allocate to equities as a function of valuation if 1) valuations can be effectively captured in the first place (i.e. how well does past and estimates capture true distribution of forward) and 2) if equities do experience overall mean-reversion tendencies due to the psychology of market participants to overbid and oversell equities throughout cycles? I begin to address these questions in my blog post on Kelly Optimal portfolios in earnings driven financial markets."
  },
  {
    "objectID": "index.html#academic-research",
    "href": "index.html#academic-research",
    "title": "About",
    "section": "Academic Research",
    "text": "Academic Research\nAs for my background, I am completing my PhD in mathematics from UC Santa Barbara with a graduation date in September of 2023. In this time, I have studied machine learning methods for solving stochastic optimal control problems and stochastic differential games. These problems are abundant in finance although the solutions can be quite difficult. The machine learning methods I have studied allow one to solve these problems that would be otherwise too difficult with other methodologies. For example, my paper here showcases a technique to solve stochastic delay differential games with machine learning and highlights various financial problems that can be solved with this technique. Along with applications to finance, I have worked on applying these methodologies to Covid-19 models in a game-theoretic setting which is featured here in the conference papers on Mathematical and Scientific Machine Learning 2021 and here in the AMS notices.\nFor this blog, I wanted to highlight some of my thoughts in a more accessible and informal manner. In part, some work is inspired by my academic research such as my blog post on Kelly Optimal portfolios among Market Cycles. Some work is just my own personal excursion into financial math topics of great interest to me such that part 1, part 2, and part 3 on how the log-optimal portfolio can be used in option pricing in a surprisingly beautiful manner!"
  }
]